#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ pytest —Ç–µ—Å—Ç—ã –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:
- –ë—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π API
- Smoke testing –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
- –û—Ç–ª–∞–¥–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

–¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8000
"""

import hashlib
import os
import sys
import time
from decimal import Decimal
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ PyCharm –∏ –¥—Ä—É–≥–∏—Ö IDE
current_file_path = Path(__file__).resolve()
project_root = current_file_path.parent.parent
os.chdir(project_root)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

print(f"üîß –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"üîß –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
print(f"üêç Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {sys.executable}")

import requests

BASE_URL = "http://localhost:8000"
REQUEST_TIMEOUT = 30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Docker


# ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    """–ö–ª–∞—Å—Å —Å ANSI –∫–æ–¥–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""

    GREEN = "\033[92m"
    RED = "\033[91m"
    YELLOW = "\033[93m"
    BLUE = "\033[94m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    BOLD = "\033[1m"
    END = "\033[0m"


def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}üîß {title}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*60}{Colors.END}")


def print_test_result(test_name, status_code, expected_code, details=None):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
    if status_code == expected_code:
        status = f"{Colors.GREEN}‚úÖ –£–°–ü–ï–®–ù–û{Colors.END}"
    else:
        status = f"{Colors.RED}‚ùå –û–®–ò–ë–ö–ê{Colors.END}"

    print(f"{status} {test_name} (–∫–æ–¥: {status_code})")
    if details:
        print(f"   üìã {details}")


def print_summary(passed, total):
    """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*60}{Colors.END}")

    if passed == total:
        print(f"{Colors.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´: {passed}/{total}{Colors.END}")
        print(f"{Colors.GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!{Colors.END}")
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û: {passed}/{total}{Colors.END}")
        print(f"{Colors.RED}‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {total-passed}/{total}{Colors.END}")


def check_user_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_header("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")

    try:
        response = requests.post(
            f"{BASE_URL}/api/auth/user/login",
            json={"email": "user@example.com", "password": "userpassword"},
            timeout=REQUEST_TIMEOUT,
        )

        if response.status_code == 200:
            data = response.json()
            token = data["access_token"]
            print_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                200,
                f"JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω ({token[:20]}...)",
            )
            return token, True
        else:
            print_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                200,
                f"–û—à–∏–±–∫–∞: {response.text}",
            )
            return None, False

    except Exception as e:
        print_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return None, False


def check_admin_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print_header("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")

    try:
        response = requests.post(
            f"{BASE_URL}/api/auth/admin/login",
            json={"email": "admin@example.com", "password": "adminpassword"},
            timeout=REQUEST_TIMEOUT,
        )

        if response.status_code == 200:
            data = response.json()
            token = data["access_token"]
            print_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                response.status_code,
                200,
                f"JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω ({token[:20]}...)",
            )
            return token, True
        else:
            print_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                response.status_code,
                200,
                f"–û—à–∏–±–∫–∞: {response.text}",
            )
            return None, False

    except Exception as e:
        print_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return None, False


def check_user_endpoints(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_header("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï API")
    headers = {"Authorization": f"Bearer {token}"}
    passed = 0
    total = 3

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–±–µ
    try:
        response = requests.get(
            f"{BASE_URL}/api/users/me", headers=headers, timeout=REQUEST_TIMEOUT
        )
        if response.status_code == 200:
            data = response.json()
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                200,
                f"ID: {data.get('id')}, Email: {data.get('email')}",
            )
            passed += 1
        else:
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response.status_code, 200
            )
    except Exception as e:
        print_test_result(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    try:
        response = requests.get(
            f"{BASE_URL}/api/users/me/accounts",
            headers=headers,
            timeout=REQUEST_TIMEOUT,
        )
        if response.status_code == 200:
            accounts = response.json()
            balance = accounts[0]["balance"] if accounts else 0
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                200,
                f"–ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts)}, –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.",
            )
            passed += 1
        else:
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response.status_code, 200
            )
    except Exception as e:
        print_test_result(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    try:
        response = requests.get(
            f"{BASE_URL}/api/users/me/payments",
            headers=headers,
            timeout=REQUEST_TIMEOUT,
        )
        if response.status_code == 200:
            payments = response.json()
            total_sum = sum(float(p["amount"]) for p in payments)
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π",
                response.status_code,
                200,
                f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}, –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f} —Ä—É–±.",
            )
            passed += 1
        else:
            print_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π", response.status_code, 200)
    except Exception as e:
        print_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

    return passed, total


def check_admin_endpoints(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print_header("–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï API")
    headers = {"Authorization": f"Bearer {token}"}
    passed = 0
    total = 2

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–±–µ
    try:
        response = requests.get(
            f"{BASE_URL}/api/admin/me", headers=headers, timeout=REQUEST_TIMEOUT
        )
        if response.status_code == 200:
            data = response.json()
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                response.status_code,
                200,
                f"ID: {data.get('id')}, Email: {data.get('email')}",
            )
            passed += 1
        else:
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", response.status_code, 200
            )
    except Exception as e:
        print_test_result(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        response = requests.get(
            f"{BASE_URL}/api/admin/users", headers=headers, timeout=REQUEST_TIMEOUT
        )
        if response.status_code == 200:
            users = response.json()
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                response.status_code,
                200,
                f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
            )
            passed += 1
        else:
            print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", response.status_code, 200
            )
    except Exception as e:
        print_test_result(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    return passed, total


def generate_signature(
    account_id, amount, transaction_id, user_id, secret_key="gfdmhghif38yrf9ew0jkf32"
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞"""
    if isinstance(amount, Decimal):
        amount_str = str(amount)
    else:
        amount_str = str(Decimal(str(amount)))

    data_string = f"{account_id}{amount_str}{transaction_id}{user_id}{secret_key}"
    return hashlib.sha256(data_string.encode()).hexdigest()


def check_webhook():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    print_header("–°–ò–°–¢–ï–ú–ê –ü–õ–ê–¢–ï–ñ–ï–ô (–í–ï–ë–•–£–ö–ò)")
    passed = 0
    total = 3

    # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    transaction_id = str(time.time())
    user_id = 1
    account_id = 1
    amount = Decimal("150.50")

    amount_as_will_be_received = Decimal(str(float(amount)))
    signature = generate_signature(
        account_id, amount_as_will_be_received, transaction_id, user_id
    )

    webhook_data = {
        "transaction_id": transaction_id,
        "user_id": user_id,
        "account_id": account_id,
        "amount": float(amount),
        "signature": signature,
    }

    try:
        response = requests.post(
            f"{BASE_URL}/api/webhooks/payment",
            json=webhook_data,
            timeout=REQUEST_TIMEOUT,
        )
        if response.status_code == 200:
            print_test_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞",
                response.status_code,
                200,
                f"–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—É–º–º–∞: {amount} —Ä—É–±.",
            )
            passed += 1
        else:
            print_test_result("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞", response.status_code, 200)
    except Exception as e:
        print_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    webhook_data["signature"] = "invalid_signature"
    try:
        response = requests.post(
            f"{BASE_URL}/api/webhooks/payment",
            json=webhook_data,
            timeout=REQUEST_TIMEOUT,
        )
        if response.status_code == 400:
            print_test_result(
                "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏",
                response.status_code,
                400,
                "–ü–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            )
            passed += 1
        else:
            print_test_result(
                "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏", response.status_code, 400
            )
    except Exception as e:
        print_test_result(
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏", 0, 400, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    # –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä—É—é—â–µ–π—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    webhook_data["signature"] = signature
    try:
        response = requests.post(
            f"{BASE_URL}/api/webhooks/payment",
            json=webhook_data,
            timeout=REQUEST_TIMEOUT,
        )
        if response.status_code == 409:
            print_test_result(
                "–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                response.status_code,
                409,
                "–î—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            )
            passed += 1
        else:
            print_test_result(
                "–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", response.status_code, 409
            )
    except Exception as e:
        print_test_result(
            "–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", 0, 409, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        )

    return passed, total


def check_admin_user_management(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print_header("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
    headers = {"Authorization": f"Bearer {token}"}
    passed = 0
    total = 3

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º email
    timestamp = str(int(time.time()))
    new_user_data = {
        "email": f"testuser{timestamp}@example.com",
        "full_name": "Test User Created",
        "password": "testpassword123",
    }

    try:
        response = requests.post(
            f"{BASE_URL}/api/admin/users",
            headers=headers,
            json=new_user_data,
            timeout=REQUEST_TIMEOUT,
        )

        if response.status_code == 201:
            user_data = response.json()
            user_id = user_data["id"]
            print_test_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                201,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}",
            )
            passed += 1

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_data = {"full_name": "Updated Test User"}
            try:
                response = requests.put(
                    f"{BASE_URL}/api/admin/users/{user_id}",
                    headers=headers,
                    json=update_data,
                    timeout=REQUEST_TIMEOUT,
                )
                if response.status_code == 200:
                    print_test_result(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        response.status_code,
                        200,
                        "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    )
                    passed += 1
                else:
                    print_test_result(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response.status_code, 200
                    )
            except Exception as e:
                print_test_result(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                )

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                response = requests.delete(
                    f"{BASE_URL}/api/admin/users/{user_id}",
                    headers=headers,
                    timeout=REQUEST_TIMEOUT,
                )
                if response.status_code == 200:
                    print_test_result(
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        response.status_code,
                        200,
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    )
                    passed += 1
                else:
                    print_test_result(
                        "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response.status_code, 200
                    )
            except Exception as e:
                print_test_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 200, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                )
        else:
            print_test_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                response.status_code,
                201,
                f"–û—à–∏–±–∫–∞: {response.text}",
            )
    except Exception as e:
        print_test_result("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0, 201, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

    return passed, total


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"{Colors.BOLD}{Colors.PURPLE}")
    print("üöÄ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"üìç –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{Colors.END}")

    total_passed = 0
    total_tests = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/", timeout=REQUEST_TIMEOUT)
        print(f"{Colors.GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
    except requests.exceptions.ConnectionError:
        print(
            f"{Colors.RED}‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.{Colors.END}"
        )
        print(
            f"{Colors.YELLOW}üí° –ò–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 -m app.main{Colors.END}"
        )
        print(
            f"{Colors.YELLOW}üí° –ò–ª–∏ –∏–∑ PyCharm: –∑–∞–ø—É—Å—Ç–∏—Ç–µ app/main.py –Ω–∞–ø—Ä—è–º—É—é{Colors.END}"
        )
        print(
            f"{Colors.CYAN}üîó –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {BASE_URL}{Colors.END}"
        )
        return
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}{Colors.END}")
        print(
            f"{Colors.YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000{Colors.END}"
        )
        return

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    user_token, user_auth_success = check_user_auth()
    admin_token, admin_auth_success = check_admin_auth()

    total_tests += 2
    if user_auth_success:
        total_passed += 1
    if admin_auth_success:
        total_passed += 1

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    if user_token:
        passed, total = check_user_endpoints(user_token)
        total_passed += passed
        total_tests += total

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    if admin_token:
        passed, total = check_admin_endpoints(admin_token)
        total_passed += passed
        total_tests += total

        passed, total = check_admin_user_management(admin_token)
        total_passed += passed
        total_tests += total

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
    passed, total = check_webhook()
    total_passed += passed
    total_tests += total

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print_summary(total_passed, total_tests)

    if total_passed == total_tests:
        print(
            f"\n{Colors.GREEN}{Colors.BOLD}üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.END}"
        )
    else:
        print(
            f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–µ—Å—Ç–∞–º{Colors.END}"
        )


if __name__ == "__main__":
    main()
